---
- name: Start Rclone
  block:
    # - name: Set facts from main.yml
    #   set_fact:
    #     "{{ item.key }}": "{{ item.value }}"
    #   with_dict: "{{ lookup('file', '../defaults/main.yml') | from_yaml }}"


    - name: Include Rclone role
      include_role:
        name: stefangweichinger.ansible_rclone
    #   vars:
    #     - include: ../defaults/main.yml

    # - name: debug
    #   debug:
    #     msg: "{{ item }}"
    #   loop: "{{ deps_info_list }}"

    - name: Make sure fuse is installed
      apt:
        name: fuse
        state: present
      register: fuse
      until: fuse is succeeded

    - name: Create ansible-nas group
      group:
        name: ansible-nas
        state: present

    - name: Create ansible-nas user
      user:
        name: ansible-nas
        state: present
        system: yes
        # update_password: on_create
        create_home: yes
        group: ansible-nas
        shell: /bin/bash

    - name: Create rclone config directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ rclone_service_user }}"
        group: "{{ rclone_service_group }}"
      with_items:
        - "{{ rclone_config_folder }}"

    - name: Create rclone mount directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ rclone_service_user }}"
        group: "{{ rclone_service_group }}"
      with_items:
        - "{{ rclone_mount }}"

    - name: Create Rclone service
      template:
        src: rclone.service
        dest: "/etc/systemd/system/rclone.service"

    - name: Enable allow_other option in fuse config
      lineinfile:
        path: "/etc/fuse.conf"
        line: 'user_allow_other'
        insertbefore: EOF

    - name: Create Service Account file
      template:
        src: gsuite.json
        dest: "/home/{{ rclone_service_user }}/.config/rclone/gsuite.json"
        owner: "{{ rclone_service_user }}"
        group: "{{ rclone_service_group }}"

    - name: Create rclone.log file
      file:
        path: /var/log/rclone.log
        state: touch
        owner: "{{ rclone_service_user }}"
        group: "{{ rclone_service_group }}"
        mode: u=rw,g=r,o=r
      tags: molecule-idempotence-notest

    - name: Force systemd to reload configs
      systemd:
        daemon_reload: true

    - name: Enable service rclone, ensure it is not masked and start it
      systemd:
        name: rclone
        enabled: true
        masked: no
        state: started
      register: start_service
      # failed_when: >
      #   (start_service.failed == true and "Could not find the requested service" in start_service.msg) or
      #   (start_service.status['ActiveState'] != "active")
  when: rclone_enabled is true

- name: Stop Rclone
  block:
    - name: Stop Rclone
      systemd:
        name: rclone
        enabled: false
        masked: true
        state: stopped
      register: stop_service
      failed_when:
        - stop_service.failed == true
        - '"Could not find the requested service" not in stop_service.msg'
        # the order is important, only failed == true, there will be
        # attribute 'msg' in the result
  when: rclone_enabled is false
